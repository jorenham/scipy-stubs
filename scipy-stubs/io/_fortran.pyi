from typing import Any, TypedDict, final, overload, type_check_only
from typing_extensions import Unpack

import numpy as np
import numpy.typing as npt
import optype.numpy as onp
from scipy._typing import EnterSelfMixin, FileLike, FileModeRW

__all__ = ["FortranEOFError", "FortranFile", "FortranFormattingError"]

@final
@type_check_only
class _DTypeKwargs(TypedDict, total=False):
    dtype: npt.DTypeLike

class FortranEOFError(TypeError, OSError): ...
class FortranFormattingError(TypeError, OSError): ...

class FortranFile(EnterSelfMixin):
    def __init__(self, /, filename: FileLike[bytes], mode: FileModeRW = "r", header_dtype: npt.DTypeLike = ...) -> None: ...
    def close(self, /) -> None: ...
    def write_record(self, /, *items: onp.ToArrayND) -> None: ...
    @overload
    def read_record(self, /, *dtypes: npt.DTypeLike) -> onp.Array1D[np.void]: ...
    @overload
    def read_record(self, /, *dtypes: npt.DTypeLike, **kwargs: Unpack[_DTypeKwargs]) -> onp.Array1D[np.void]: ...
    @overload
    def read_ints(self, /) -> onp.Array1D[np.int32]: ...
    @overload
    def read_ints(self, /, dtype: onp.AnyIntegerDType) -> onp.Array1D[np.integer[Any]]: ...
    @overload
    def read_ints(self, /, dtype: npt.DTypeLike) -> onp.Array1D: ...
    @overload
    def read_reals(self, /) -> onp.Array1D[np.float64]: ...
    @overload
    def read_reals(self, /, dtype: onp.AnyFloatingDType) -> onp.Array1D[np.floating[Any]]: ...
    @overload
    def read_reals(self, /, dtype: npt.DTypeLike) -> onp.Array1D: ...
