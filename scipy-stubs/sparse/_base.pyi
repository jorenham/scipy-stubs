# mypy: disable-error-code="misc"
# pyright: reportUnannotatedClassAttribute=false

import abc
from collections.abc import Iterator, Sequence
from typing import Final, Generic, Literal, TypeAlias, overload
from typing_extensions import Self, TypeIs, TypeVar

import numpy as np
import optype as op
import optype.numpy as onp
import optype.typing as opt
from scipy._typing import Casting, OrderCF, Untyped
from ._bsr import bsr_array, bsr_matrix
from ._coo import coo_array, coo_matrix
from ._csc import csc_array, csc_matrix
from ._csr import csr_array, csr_matrix
from ._dia import dia_array, dia_matrix
from ._dok import dok_array, dok_matrix
from ._lil import lil_array, lil_matrix
from ._matrix import spmatrix as spmatrix
from ._typing import Float, Int, Scalar, SPFormat, ToShape

__all__ = ["SparseEfficiencyWarning", "SparseWarning", "issparse", "isspmatrix", "sparray"]

_T = TypeVar("_T")
_OutT = TypeVar("_OutT", bound=onp.ArrayND)
_SCT = TypeVar("_SCT", bound=np.generic)
_SCT_co = TypeVar("_SCT_co", bound=Scalar, default=Scalar, covariant=True)

_Matrix: TypeAlias = np.matrix[tuple[int, int], np.dtype[_SCT]]

_ToSparseFromPy: TypeAlias = Sequence[Sequence[_T]] | Sequence[_T]
_ToSparseFromArrayLike: TypeAlias = onp.CanArrayND[_SCT_co] | _ToSparseFromPy[_SCT_co]

_Real: TypeAlias = np.bool_ | Int | Float

###

MAXPRINT: Final = 50

class SparseWarning(Warning): ...
class SparseFormatWarning(SparseWarning): ...
class SparseEfficiencyWarning(SparseWarning): ...

# TODO(jorenham): Generic `shape` and `data`
class _spbase(Generic[_SCT_co]):
    __array_priority__: float = 10.1
    maxprint: Final[int | None]

    # TODO(jorenham): In `scipy>=1.15.0` `{coo,dok}_array` will support >2-D arrays
    @property
    def ndim(self, /) -> Literal[1, 2]: ...
    @property
    def shape(self, /) -> tuple[int] | tuple[int, int]: ...
    @property
    def nnz(self, /) -> int: ...
    @property
    def size(self, /) -> int: ...

    # NOTE: At runtime this isn't abstract, but returns `und` instead.
    @property
    @abc.abstractmethod
    def format(self, /) -> SPFormat: ...

    #
    @property
    def T(self, /) -> Self: ...
    @property
    def real(self, /) -> Self: ...
    @property
    def imag(self, /) -> Self: ...

    # NOTE: In `scipy>=1.15.0` the `maxprint` param will become keyword-only.
    @overload  # shape
    def __init__(self: _spbase[np.float64], /, arg1: ToShape, maxprint: int | None = 50) -> None: ...
    @overload  # sparse
    def __init__(self, /, arg1: _spbase[_SCT_co], maxprint: int | None = 50) -> None: ...
    @overload  # dense array-like
    def __init__(self, /, arg1: _ToSparseFromArrayLike[_SCT_co], maxprint: int | None = 50) -> None: ...
    @overload  # dense array-like bool
    def __init__(self: _spbase[np.bool_], /, arg1: _ToSparseFromPy[bool], maxprint: int | None = 50) -> None: ...
    @overload  # dense array-like int
    def __init__(self: _spbase[np.int_], /, arg1: _ToSparseFromPy[opt.JustInt], maxprint: int | None = 50) -> None: ...
    @overload  # dense array-like float
    def __init__(self: _spbase[np.float64], /, arg1: _ToSparseFromPy[opt.Just[float]], maxprint: int | None = 50) -> None: ...
    @overload  # dense array-like cfloat
    def __init__(
        self: _spbase[np.complex128],
        /,
        arg1: _ToSparseFromPy[opt.Just[complex]],
        maxprint: int | None = 50,
    ) -> None: ...
    @overload  # dense array-like real (pyright is wrong here)
    def __init__(  # pyright: ignore[reportOverlappingOverload]
        self: _spbase[np.float64 | np.int_ | np.bool_],
        /,
        arg1: _ToSparseFromPy[float | int],
        maxprint: int | None = 50,
    ) -> None: ...
    @overload  # dense array-like complex (pyright is wrong here)
    def __init__(  # pyright: ignore[reportOverlappingOverload]
        self: _spbase[np.complex128 | np.float64 | np.int_ | np.bool_],
        /,
        arg1: _ToSparseFromPy[complex | float | int],
        maxprint: int | None = 50,
    ) -> None: ...

    #
    def __bool__(self, /) -> bool: ...

    #
    @overload  # {csc,csr}_array
    def __iter__(self: csc_array | csr_array, /) -> Iterator[csr_array[_SCT_co]]: ...
    @overload  # {csc,csr}_matrix
    def __iter__(self: csc_matrix | csr_matrix, /) -> Iterator[csr_matrix[_SCT_co]]: ...
    @overload  # dok_array
    def __iter__(self: dok_array, /) -> Iterator[dok_array[_SCT_co]]: ...
    @overload  # dok_matrix
    def __iter__(self: dok_matrix, /) -> Iterator[dok_matrix[_SCT_co]]: ...
    @overload  # dok_array
    def __iter__(self: lil_array, /) -> Iterator[lil_array[_SCT_co]]: ...
    @overload  # dok_array
    def __iter__(self: lil_matrix, /) -> Iterator[lil_matrix[_SCT_co]]: ...

    #
    @overload
    def __lt__(self: sparray, other: _spbase[_Real] | onp.ToFloat, /) -> csr_array[np.bool_]: ...
    @overload
    def __lt__(self: spmatrix, other: _spbase[_Real], /) -> csr_matrix[np.bool_]: ...
    @overload
    def __gt__(self: sparray, other: _spbase[_Real] | onp.ToFloat, /) -> csr_array[np.bool_]: ...
    @overload
    def __gt__(self: spmatrix, other: _spbase[_Real], /) -> csr_matrix[np.bool_]: ...
    @overload
    def __le__(self: sparray, other: _spbase[_Real] | onp.ToFloat, /) -> csr_array[np.bool_]: ...
    @overload
    def __le__(self: spmatrix, other: _spbase[_Real], /) -> csr_matrix[np.bool_]: ...
    @overload
    def __ge__(self: sparray, other: _spbase[_Real] | onp.ToFloat, /) -> csr_array[np.bool_]: ...
    @overload
    def __ge__(self: spmatrix, other: _spbase[_Real], /) -> csr_matrix[np.bool_]: ...

    #
    def __neg__(self, /) -> Self: ...
    def __abs__(self, /) -> Self: ...
    def __round__(self, /, ndigits: int = 0) -> Self: ...

    #
    def __add__(self, other: Untyped, /) -> Untyped: ...
    def __radd__(self, other: Untyped, /) -> Untyped: ...
    def __sub__(self, other: Untyped, /) -> Untyped: ...
    def __rsub__(self, other: Untyped, /) -> Untyped: ...
    def __mul__(self, other: Untyped, /) -> Untyped: ...
    def __rmul__(self, other: Untyped, /) -> Untyped: ...
    def __matmul__(self, other: Untyped, /) -> Untyped: ...
    def __rmatmul__(self, other: Untyped, /) -> Untyped: ...
    def __truediv__(self, other: Untyped, /) -> Untyped: ...
    def __div__(self, other: Untyped, /) -> Untyped: ...  # que?
    def __pow__(self, other: Untyped, /) -> Untyped: ...

    #
    def nonzero(self, /) -> tuple[onp.Array1D[np.int32], onp.Array1D[np.int32]]: ...
    def count_nonzero(self, /) -> int: ...
    def conjugate(self, /, copy: bool = True) -> Self: ...
    def conj(self, /, copy: bool = True) -> Self: ...
    def transpose(self, /, axes: Untyped | None = None, copy: bool = False) -> Self: ...

    #
    def multiply(self, /, other: Untyped) -> Untyped: ...
    def maximum(self, /, other: Untyped) -> Untyped: ...
    def minimum(self, /, other: Untyped) -> Untyped: ...
    def dot(self, /, other: Untyped) -> Untyped: ...
    def power(self, /, n: Untyped, dtype: Untyped | None = None) -> Self: ...

    #
    def diagonal(self, /, k: int = 0) -> onp.Array1D[_SCT_co]: ...  # only if 2-d
    def trace(self, /, offset: int = 0) -> _SCT_co: ...

    #
    def sum(self, /, axis: op.CanIndex | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def mean(self, /, axis: op.CanIndex | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...

    #
    def copy(self, /) -> Self: ...
    def reshape(self, /, *args: Untyped, **kwargs: Untyped) -> Self: ...
    def astype(self, /, dtype: Untyped, casting: Casting = "unsafe", copy: bool = True) -> Untyped: ...
    def asformat(self, /, format: Untyped, copy: bool = False) -> Untyped: ...

    #
    @overload  # self: spmatrix, out: None
    def todense(self: spmatrix, /, order: OrderCF | None = None, out: None = None) -> _Matrix[_SCT_co]: ...
    @overload  # self: spmatrix, out: array (positional)
    def todense(self: spmatrix, /, order: OrderCF | None, out: onp.ArrayND[_SCT]) -> _Matrix[_SCT]: ...
    @overload  # self: spmatrix, out: array (keyword)
    def todense(self: spmatrix, /, order: OrderCF | None = None, *, out: onp.ArrayND[_SCT]) -> _Matrix[_SCT]: ...
    @overload  # out: None
    def todense(self, /, order: OrderCF | None = None, out: None = None) -> onp.Array2D[_SCT_co]: ...
    @overload  # out: array (positional)
    def todense(self, /, order: OrderCF | None, out: _OutT) -> _OutT: ...
    @overload  # out: array (keyword)
    def todense(self, /, order: OrderCF | None = None, *, out: _OutT) -> _OutT: ...

    #
    @overload  # out: None
    def toarray(self, /, order: OrderCF | None = None, out: None = None) -> onp.Array2D[_SCT_co]: ...
    @overload  # out: array (positional)
    def toarray(self, /, order: OrderCF | None, out: _OutT) -> _OutT: ...
    @overload  # out: array  (keyword)
    def toarray(self, /, order: OrderCF | None = None, *, out: _OutT) -> _OutT: ...

    #
    @overload
    def tobsr(self: sparray, /, blocksize: tuple[int, int] | None = None, copy: bool = False) -> bsr_array[_SCT_co]: ...
    @overload
    def tobsr(self: spmatrix, /, blocksize: tuple[int, int] | None = None, copy: bool = False) -> bsr_matrix[_SCT_co]: ...
    #
    @overload
    def tocoo(self: sparray, /, copy: bool = False) -> coo_array[_SCT_co]: ...
    @overload
    def tocoo(self: spmatrix, /, copy: bool = False) -> coo_matrix[_SCT_co]: ...
    #
    @overload
    def tocsc(self: sparray, /, copy: bool = False) -> csc_array[_SCT_co]: ...
    @overload
    def tocsc(self: spmatrix, /, copy: bool = False) -> csc_matrix[_SCT_co]: ...
    #
    @overload
    def tocsr(self: sparray, /, copy: bool = False) -> csr_array[_SCT_co]: ...
    @overload
    def tocsr(self: spmatrix, /, copy: bool = False) -> csr_matrix[_SCT_co]: ...
    #
    @overload
    def todia(self: sparray, /, copy: bool = False) -> dia_array[_SCT_co]: ...
    @overload
    def todia(self: spmatrix, /, copy: bool = False) -> dia_matrix[_SCT_co]: ...
    #
    @overload
    def todok(self: sparray, /, copy: bool = False) -> dok_array[_SCT_co]: ...
    @overload
    def todok(self: spmatrix, /, copy: bool = False) -> dok_matrix[_SCT_co]: ...
    #
    @overload
    def tolil(self: sparray, /, copy: bool = False) -> lil_array[_SCT_co]: ...
    @overload
    def tolil(self: spmatrix, /, copy: bool = False) -> lil_matrix[_SCT_co]: ...

    #
    def resize(self, /, shape: tuple[op.CanIndex, op.CanIndex]) -> None: ...
    def setdiag(self, /, values: onp.ToComplex1D, k: int = 0) -> None: ...

class sparray: ...

def issparse(x: object) -> TypeIs[_spbase]: ...
def isspmatrix(x: object) -> TypeIs[spmatrix]: ...
